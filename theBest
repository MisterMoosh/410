import java.io.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;



//This is the class that is run to accomplish work.
//Preconditions of the program should be that it is run with a file name in its arguments
//and the file ought to be present in the project folder. This is subject to change, but it will service
//at least for now.
public class theBest {

	//Global Variables
	static String header;
	public static int vertices;
	public static int faces;
	
	/*On the organization of 2d arrays in Java, I can do this two ways.
	in the first, I can have the first array be of the different points,
	and then the second be the different positions within those vectors,
	or I can I reverse it and scroll through the 4 positions within the 
	vertices. As of now -and until I find good reason to change my
	decision- I will have the first index hold different vectors, and then
	have the second index access the points therein. Think:
	[a b c d]
	[e f g h]
	[i j k l], which I would get from vertexArray[3][4]*/
	public static float[][] vertexArray;
	
	//This is very similar, but holds the data beneath the vertices.
	public static int[][] faceArray;
	
	public static void main(String[] args) throws IOException {
		//This checks if the user has input two arguments for input and output
		//file names. If they don't, or use too many arguments, the program
		//exits.
		if(args.length!=2){
			System.out.println("Must specify input and output file names.");
			System.exit(0);
		}
		//STEP ONE: Read in the file.
		readFile(args[0]);

		//STEP TWO: While loop handling transformations

		System.out.println(vertices+" "+faces +"\nSNAPINTOASLIMJIM");
		
		//printing the points out. Note that you should only do this when
		//the 'W' command is specified.
		writeFile(args[1]);
	//end main
	}
	
	//This method will print out the transformed data into a specified
	//output file. I will run it at the end of the while loop that keeps
	//accepting transformation inputs.
	public static void writeFile(String outFile) throws IOException {
		//Creating a BufferedWriter to print to the new file.
		Writer writer = new BufferedWriter(new OutputStreamWriter(
				new FileOutputStream(outFile), "utf-8"));
		//First we print out the header
					writer.write(header+"\n");
					//Then we print out the vertices.
					for(int i=0;i<vertices;i++){
						for(int j=0;j<=3;j++){
							writer.write(vertexArray[i][j]+" ");
						}writer.write("\n");
					}
					
					//And now we print the rest of the data.
					
					writer.close();
		
	}

	/*this method will process the file given for input.
	 * It will save the header into a string, 
	 * save the vertices into a matrix construct 2D array
	 * And then the number of faces into a variable. I will
	 * also save the remaining data into a similar 2D array.*/
	public static void readFile(String fileName) throws IOException{
		//These integer flags will be used to help keep the program from going
		//through too many unnecessary if statements; the first section
		//only applies to the pre-data bits, and so and so forth.
		int topflag=0;
		int resetflag=0;
		
		
		

		//First, construct a FileReader To get into the file.
		FileReader input = new FileReader(fileName);
		//Then, couple it with a BufferedReader
		BufferedReader br = new BufferedReader(input);
		String line="";
		
		//this variable will help me to count through lines to identify
		//what lines I want to do with where, given the standardized form
		//of the input files.
		int linecounter=0;
		
		//This variable will help me tell when to switch what I'm saving
		//in the data processing section.
		int dataLines=vertices+faces;
		
		//This variable will enable me to allocate memory for my faces
		//storage and avoid re-creating the 2d array over and over.
		int faceArrayFlag=0;
		
		//All this loop does is read through the file to make sure I have 
		//access to everything. Sort of a sanity check that I'll have to get rid of
		//once I start actually categorizing and filing the data (probably).
		while((line=br.readLine())!=null){
			//System.out.println(line);
			
			//SORTING THE OUTPUT.
			
			//This checks if we can reset the linecounter, which we'll only
			//do once when we switch from the header to the data.
			if(resetflag==1){
				linecounter=0;
				resetflag=0;
			}
			
			
			//This first if will keep the data from being iterated over
			//more times than it needs to.
			if(topflag==0){
			
			//This if detects whether we are reading the first line.
			//I need to do this because without this 'if', there is already
			//a 'null' when I try to concatenate more to the string.
			//This first if ensures I don't get any of that.
			if(linecounter==0){
				header=line;
				
			}
			//This next else if snags the next two lines of code, plain and 
			//simple since nothing needs to be done with them or extracted
			//from them.
			else if(linecounter<=2){
				header+="\n";
				header+=line;
				
			}
			//this if block will catch the line that holds the number of vertices
			//in the model, and then stores it in a variable vertices.
			if(linecounter==3){
				//first we need to add the line to the header
				header+="\n"+line;
				//Then we need to extract the number from the string.
				//This line deletes everything that isn't a number 0-9 within
				//the string.
				line = line.replaceAll("[^0-9]+", "");
				vertices=Integer.parseInt(line);
			}
			//The next three lines just add "property float32 x", etc
			//to our saved header since we don't really care if the floats
			//are 32 or 64 
			//(if it turns out we do, I'll change something here)
			if(linecounter>=4 && linecounter<=6){
				header+="\n";
				header+=line;
			}
			
			//In this next if, we need to extract the number of faces
			//from the header, which will be done in much the same
			//way as extracting the number of vertices.
			if(linecounter==7){
				header+="\n"+line;
				line = line.replaceAll("[^0-9]+", "");
				faces=Integer.parseInt(line);
			}
			if(linecounter==8){
				header+="\n"+line;
			}
			if(linecounter==9){
				header+="\n"+line;
				topflag++;
				resetflag++;
				
				//We can now set the vertexArray's size since we know the number
				//of vertices that we have.
				vertexArray=new float[vertices][4];
				continue;
			}
			//increment the counter to prepare for next cycle.
			linecounter++;
			
			//This is the end of the non-data processing block.
			}
			
			
			//This is the beginning of data processing (vertices and lower)
			if(topflag==1){
				
			
			
			
			
			//now we can count the lines until we've populated the array.
			//This is easy now that we can just check the line counter
			//against the number of vertices total.
			if(linecounter<vertices){
				System.out.println("Okay, linecounter: "+linecounter);
				System.out.println("And number of vertices: "+vertices);
				//SO. Here we need to parse out the floats from the strings
				//we're reading in and then add a '1' in the 4th index to 
				//give our vertices that last data point (which I think is
				//correct and necessary?).
				
				//I'm going to use a pattern like I did to parse out integers
				//earlier, but tweaked a bit to work for floting points.
				Pattern p = Pattern.compile("[-]?[0-9]*\\.?[0-9]+");
				
				//This matcher will help me distinguish where the floats
				//start and end, but in order to place them correctly,
				//I also need to add the index counter below it.
				Matcher m = p.matcher(line);
				int index=0;
				while(m.find()){
					if(index<=2){
					vertexArray[linecounter][index]=Float.parseFloat(m.group());
					System.out.println("points: "+vertexArray[linecounter][index]);
					index++;
					}
				}
				//Now that everything else is fleshed out, we can go ahead and
				//add the '1' in the last index.
				vertexArray[linecounter][3]=(float) 1;
				
				//And here, now that we're ready for another line, we can increment
				//the linecounter.
				linecounter++;
				
				//This shows that we can go ahead and create the array for
				//the faces. It also should NEVER get set to one after it 
				//has passed through and the array has been made.
				faceArrayFlag=1;
				
				//Now we're searching the rest of the file for faces, and 
				//saving them.
			}
			if(linecounter>=vertices && linecounter <dataLines){
				System.out.println("LENGTH OF FACES: "+line.length());
				if(faceArrayFlag==1){
					int numfaces=0;
					faceArrayFlag=0;
					faceArray=new int[faces][numfaces];
				}
				
			}
			
			//End of Data processing block.	
			}
		//End of input processing loop.
		}
		System.out.println("-------------------------");
	}
	

	
}
